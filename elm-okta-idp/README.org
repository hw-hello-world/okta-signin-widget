* Some concepts

1. Tasks, [[http://package.elm-lang.org/packages/elm-lang/core/4.0.5/Task][API]], [[http://elm-lang.org/blog/announce/0.15][Release Notes]]
2. [[http://elm-lang.org/blog/farewell-to-frp][Subscription]]
3. ~Cmd~
4. port, JS interop

* Understand Elm

  1. ~view : Model -> Html msg~ is one direction from Model to View
  2. ~Html msg~ means View could generate ~Msg~ and ~update: Msg ->
     Model -> Model~ will turn it into an /new/ Model
  3. ~init~ create an inital ~Model~
  4. ~Model~ is actually sort of ~State~

#+BEGIN_SRC plantuml :file data/elm-arch-mvc.svg
title: MVC

[Model] -> [View] : view
note top: "view : Model -> Html Msg"
[View] ..> [Msg]
[Msg] ..> [Elm Platform] : listenTo
[Elm Platform] -> [(Model, Cmd Msg)] : update
note top: "update : Msg -> Model -> (Model, Cmd Msg)
[(Model, Cmd Msg)] -> [Model]: generate

#+END_SRC

#+RESULTS:
[[file:data/elm-arch-mvc.svg]]

#+BEGIN_SRC plantuml :file data/elm-arch-interop-js.svg
title: Interop JS

[(Model, Cmd Msg)] -> [Cmd Msg]: generate
[Cmd Msg] ..> [JS] : listenTo
[JS] -> [Sub Msg] : send
[Cmd Msg] -> [Msg]: generate
[Sub Msg] -> [Msg]: generate

#+END_SRC

#+RESULTS:
[[file:data/elm-arch-io-js.svg]]


* TODO Tasks [2/3]

1. [ ] Webpack v.s. gulp ??
2. [X] pure ELM by creating FFI OktaSignin ?
   - [X] doc for writting an FFI module?
   - https://elmseeds.thaterikperson.com/native-modules
   - turns out it's preferred to use ~port~
3. [X] scale Elm application (multiple apps)?
   - [[https://guide.elm-lang.org/architecture/][latest 0.17 archtecture]]
   - single giant ~Model~ per page
   - single ~Msg~ per page
   - need try an bigger project to see how it feels like

* Implementation Details
** Approach 1
#+BEGIN_SRC plantuml :file data/okta-elm-localstorage.svg
title: Elm + Okta + LocalStorage
autonumber

JS -> LocalStorage: <<get user>>
activate LocalStorage
LocalStorage --> JS: <<user>>
deactivate LocalStorage

JS -> Elm: <<fullscreen(user)>>
activate Elm

alt user == null

Elm -\ JS: <<show login>>
activate JS
JS -\ "Okta Signin Widget": <<renderEl>>
activate "Okta Signin Widget"
"Okta Signin Widget" -> Okta: <<signin>>
activate Okta
Okta --> "Okta Signin Widget": <<token + profile>>
deactivate Okta
"Okta Signin Widget" --> JS: <<token + profile>>
deactivate "Okta Signin Widget"
JS -> LocalStorage: <<set user>>
activate LocalStorage
LocalStorage --> JS: <<void>>
deactivate LocalStorage
JS -\ Window: <<refresh>>
activate Window
deactivate Window

else user != null
Elm -> Elm: <<show user info>>

end

deactivate Elm
deactivate JS

#+END_SRC

#+RESULTS:
[[file:data/elm-okta-localstorage.svg]]

** approach 2

   - *Highlight TODO*: persistent data to localstorage

#+begin_src plantuml :file data/okta-elm-status.svg
title: Elm + Okta
autonumber

JS -> Elm: <<fullscreen>>
activate JS
activate Elm

Elm -> Elm: <<model status>>

alt isLoginStatus
Elm -> Elm: <<view - show user info>>

else isNotLoginStatus

Elm -\ JS: <<show login>>
activate JS
JS -\ "Okta Signin Widget": <<renderEl>>
activate "Okta Signin Widget"
"Okta Signin Widget" -> Okta: <<signin>>
activate Okta
Okta --> "Okta Signin Widget": <<token + profile>>
deactivate Okta
"Okta Signin Widget" --> JS: <<token + profile>>
deactivate "Okta Signin Widget"
JS --\ Elm: <<user>>
Elm -> Elm: <<view - show user info>>

end

Elm -> JS: <<void>>
deactivate Elm
deactivate JS

#+END_SRC

#+RESULTS:
[[file:data/okta-elm-status.svg]]

** approach 3
#+begin_src plantuml :file data/elm-ffi-okta.svg

title: Elm FFI Okta
autonumber

Elm -> Elm: <<fullscreen>>
activate Elm

Elm -> Elm: <<model status>>

alt isLoginStatus
Elm -> Elm: <<view - show user info>>

else isNotLoginStatus

Elm -> OktaSignIn.elm: <<show login>>
activate OktaSignIn.elm
OktaSignIn.elm -> OktaSignin.js
activate OktaSignin.js
OktaSignin.js -> Okta: <<signin>>
activate Okta
Okta --> OktaSignin.js:: <<token + profile>>
deactivate Okta
OktaSignin.js --> OktaSignIn.elm: <<token + profile>>
deactivate OktaSignin.js
OktaSignIn.elm --> Elm: <<token + profile>>
deactivate OktaSignIn.elm
Elm -> Elm: <<view - show user info>>

end

deactivate Elm

#+END_SRC

#+RESULTS:
[[file:data/elm-ffi-okta.svg]]
* Links
  - [[http://tech.noredink.com/][NoRedInk Blog]]
  - [[http://www.gizra.com/content/thinking-choosing-elm/][Thinking choosing Elm]]
