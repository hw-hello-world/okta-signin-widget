* Some concepts

  1. Tasks, [[http://package.elm-lang.org/packages/elm-lang/core/4.0.5/Task][API]], [[http://elm-lang.org/blog/announce/0.15][Release Notes]]
  2. [[http://elm-lang.org/blog/farewell-to-frp][Subscription]]
  3. ~Cmd~
  4. port, JS interop


* Understand Elm

  1. ~view : Model -> Html msg~ is one direction from Model to View
  2. ~Html msg~ means View could generate ~Msg~ and ~update~ will turn
     it into an /new/ Model
     - ~update: Msg -> Model -> Model~
     - ~update: Msg -> Model -> (Model, Cmd msg)~
  3. ~init~ create an inital ~Model~
  4. ~Model~ is actually sort of ~State~

#+CAPTION: Elm Arch MVC
#+NAME:   fig:elm-arch-mvc.svg
[[./data/elm-arch-mvc.png]]

#+BEGIN_SRC plantuml :file data/elm-arch-mvc.png :results output silent
title: MVC

[Model] -> [View] : view
note top: "view : Model -> Html Msg"
[View] ..> [Msg] : cmd
[Msg] ..> [Elm Platform] : listenTo
[Elm Platform] -> [(Model, Cmd Msg)] : update
note top: 1. "update : Msg -> Model -> (Model, Cmd Msg)"\n2. Could creat infinite loop possiblely (see hello-world/)
[(Model, Cmd Msg)] ..> [Msg] : cmd
[(Model, Cmd Msg)] -> [Model]: generate

#+END_SRC


#+CAPTION: Elm Arch IO with JavaScript
#+NAME:   fig:elm-arch-interop-js.svg
[[./data/elm-arch-interop-js.png]]

#+BEGIN_SRC plantuml :file data/elm-arch-interop-js.png :results silent
title: Interop JS

[(Model, Cmd Msg)] -> [Cmd Msg]: generate
[Cmd Msg] ..> [JS] : listenTo
[JS] -> [Sub Msg] : send
[Cmd Msg] -> [Msg]: generate
[Sub Msg] -> [Msg]: generate

#+END_SRC


* TODO Tasks [3/3]


  1. MAYBE: Webpack v.s. gulp ??
  2. [X] pure ELM by creating FFI OktaSignin ?
  3. [X] doc for writting an FFI module?
     - https://elmseeds.thaterikperson.com/native-modules
     - https://github.com/NoRedInk/take-home/wiki/Writing-your-first-Elm-Native-module
     - https://github.com/NoRedInk/take-home/wiki/Writing-Native
     - turns out it's preferred to use ~port~
     - [[https://groups.google.com/forum/#!topic/elm-dev/1JW6wknkDIo][Evan is quite conservative]] regardling native binding plus an
       public Native API in Elm.
     - I feel the principle is build everything in Elm
  4. [X] scale Elm application (multiple apps)?
     - [[https://guide.elm-lang.org/architecture/][latest 0.17 archtecture]]
     - single giant ~Model~ per page
     - single ~Msg~ per page
     - need try an bigger project to see how it feels like

* Implementation Details
** Approach 1

#+CAPTION: Elm Okta LocalStorage
#+NAME: fig:elm-okta-localstorage.png
[[./data/okta-elm-localstorage.png]]

#+BEGIN_SRC plantuml :file data/okta-elm-localstorage.png :results silent
title: Elm + Okta + LocalStorage
autonumber

JS -> LocalStorage: <<get user>>
activate LocalStorage
LocalStorage --> JS: <<user>>
deactivate LocalStorage

JS -> Elm: <<fullscreen(user)>>
activate Elm

alt user == null

Elm -\ JS: <<show login>>
activate JS
JS -\ "Okta Signin Widget": <<renderEl>>
activate "Okta Signin Widget"
"Okta Signin Widget" -> Okta: <<signin>>
activate Okta
Okta --> "Okta Signin Widget": <<token + profile>>
deactivate Okta
"Okta Signin Widget" --> JS: <<token + profile>>
deactivate "Okta Signin Widget"
JS -> LocalStorage: <<set user>>
activate LocalStorage
LocalStorage --> JS: <<void>>
deactivate LocalStorage
JS -\ Window: <<refresh>>
activate Window
deactivate Window

else user != null
Elm -> Elm: <<show user info>>

end

deactivate Elm
deactivate JS

#+END_SRC


** Approach 2

   - *Highlight TODO*: persistent data to localstorage

#+CAPTION: Okta Elm Status and LocalStorage
#+NAME: fig:okta-elm-status.png
[[./data/okta-elm-status.png]]

#+BEGIN_SRC plantuml :file data/okta-elm-status.png :results silent
title: Elm + Okta
autonumber

JS -> Elm: <<fullscreen>>
activate JS
activate Elm

Elm -> Elm: <<model status>>

alt isLoginStatus
Elm -> Elm: <<view - show user info>>

else isNotLoginStatus

Elm -\ JS: <<show login>>
activate JS
JS -\ "Okta Signin Widget": <<renderEl>>
activate "Okta Signin Widget"
"Okta Signin Widget" -> Okta: <<signin>>
activate Okta
Okta --> "Okta Signin Widget": <<token + profile>>
deactivate Okta
"Okta Signin Widget" --> JS: <<token + profile>>
deactivate "Okta Signin Widget"
JS --\ Elm: <<user>>
Elm -> Elm: <<view - show user info>>

end

Elm -> JS: <<void>>
deactivate Elm
deactivate JS

#+END_SRC

** Approach 3 - rewrite okta-signin-widget in Elm. ðŸ˜ˆ ðŸŒ±

* Links

  - [[http://tech.noredink.com/][NoRedInk Blog]]
  - [[http://www.gizra.com/content/thinking-choosing-elm/][Thinking choosing Elm]]

* Epilogue
  1. unmature. `0.18`
  2. ecosystem - ports or rewrite in Elm
  3. small community, friendly and many experties in community
  4. single global `update` for Cmd handler
  5. [[https://github.com/elm-guides/elm-for-js/blob/master/Where%2520Did%2520Null%2520And%2520Undefined%2520Go.md][`null` and `undefined`]]
  6. `ports` is for JS interop. otherwise is discourage.
